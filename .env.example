# =============================
# nvidia-smi-web Dashboard - Environment
# =============================
# Copy this file to `.env.local` (for local dev) or `.env` (for prod)
# and fill in the values. Do NOT commit real secrets.
#
# Notes:
# - Variables starting with NEXT_PUBLIC_ are exposed to the browser.
# - Booleans must be 'true' or 'false' (all lowercase).
# - Lists are comma-separated without spaces.

# -------- Core UI (public) --------
# The site title shown on pages
NEXT_PUBLIC_SITE_TITLE=GPU Dashboard

# Meta description used for SEO
NEXT_PUBLIC_SITE_DESCRIPTION=GPU Dashboard in CITE Lab

# Whether login is disabled; if 'true', anyone can access the dashboard
NEXT_PUBLIC_NO_NEED_LOGIN=false

# Comma-separated server IDs to display on the homepage.
# Must match keys defined in SERVERS below.
NEXT_PUBLIC_SERVERS_ID=s1,s2

# Optional: JSON string of custom elements rendered on the top of homepage
# See CUSTOM_ELEMENTS_GUIDE.md for formats and examples
# Example (one line JSON):
# NEXT_PUBLIC_CUSTOM_ELEMENTS='[{"type":"link","href":"https://www.do1e.cn/posts/citelab/server-help","text":"help","target":"_blank","rel":"noopener noreferrer","svgIcon":"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"}]'
NEXT_PUBLIC_CUSTOM_ELEMENTS=

# Optional: number of samples kept in GPU history charts (default: 200)
NEXT_PUBLIC_CHART_DATA_LENGTH=200

# -------- Authentication --------
# Secret key for signing/verifying JWT tokens (use a strong random string)
JWT_SECRET=replace-with-a-secure-random-string

# Optional: allow simple token-based access. If set, a cookie named 'auth_token'
# equal to this value will bypass JWT verification in middleware
# For accessing the api
TOKEN=

# Displayed in error messages to tell users whom to contact
DEVOPS=

# Comma-separated allowlist of login emails. If empty, everyone is allowed.
# Example: user1@example.com,user2@example.com
ALLOWED_EMAILS=

# -------- Server configuration --------
# Server configurations in JSON format
# Run the agent first: https://github.com/nvidia-smi-web/agent
# You can use SSH tunnels for remote servers behind firewalls, find examples in `pre-run.example.sh`
# Example (one line JSON):
# SERVERS='{"s1":{"url":"http://s1.example.com/status?process=C","token":"123456"},"s2":{"url":"http://s2.example.com/status?process=C","token":"123456"},"s3":{"url":"http://localhost:60003/status?process=C","token":"123456"},"s4":{"url":"http://localhost:60004/status?process=C","token":"123456"}}'
SERVERS=

# -------- Email (SMTP) for sending verification codes --------
# if NEXT_PUBLIC_NO_NEED_LOGIN is true, email settings are unnecessary
# SMTP server host, e.g., smtp.gmail.com
SMTP_HOST=

# SMTP server port (e.g., 587 for STARTTLS, 465 for SSL)
SMTP_PORT=587

# Whether to use TLS/SSL directly (usually 'false' for port 587, 'true' for 465)
SMTP_SECURE=false

# SMTP auth username (from address will use this value)
SMTP_USER=

# SMTP auth password or app-specific token
SMTP_PASS=

# -------- Redis (verification code storage) --------
# Redis connection URL
# Examples:
#  - redis://localhost:6379
#  - rediss://:<password>@host:port
REDIS_URL=redis://localhost:6379

# -------- Logging & Timezone --------
# Path to the CSV access log file (will be created if missing)
ACCESS_LOG_PATH=data/log/access.csv

# Server timezone for timestamps
# Example: Asia/Shanghai, UTC, America/New_York
TZ=Asia/Shanghai
